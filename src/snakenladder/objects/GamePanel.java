/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package snakenladder.objects;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;
import snakenladder.resources.utils.Constants;
import snakenladder.resources.utils.GenUtils;

/**
 *
 * @author bayasys
 */
public class GamePanel extends javax.swing.JFrame {

    /**
     * Creates new form GamePanel
     */
    ArrayList<player> players = new ArrayList<>();
    ArrayList<Snake> snakes = new ArrayList<>();
    ArrayList<Ladder> ladders = new ArrayList<>();

    ActionListener animate = new ActionListener() {
        private int index = 1;

        @Override
        public void actionPerformed(ActionEvent e) {
            if (index < 7) {
                index++;
            } else {
                timer.stop();
                index = GenUtils.getRandomNumberInRange(1, 6);
            }
            setDiceImage(index);
        }
    };
    final Timer timer = new Timer(100, animate);

    private void setDiceImage(int no) {
        try {
            ImageIcon image;
            Image img;
            switch (no) {
                case 1:
                    img = ImageIO.read(Constants.DICE1);
                    break;
                case 2:
                    img = ImageIO.read(Constants.DICE2);
                    break;
                case 3:
                    img = ImageIO.read(Constants.DICE3);
                    break;
                case 4:
                    img = ImageIO.read(Constants.DICE4);
                    break;
                case 5:
                    img = ImageIO.read(Constants.DICE5);
                    break;
                case 6:
                    img = ImageIO.read(Constants.DICE6);
                    break;
                default:
                    img = ImageIO.read(Constants.DICE1);
            }
            Image newimg = img.getScaledInstance(btnDice.getWidth(), btnDice.getHeight(), java.awt.Image.SCALE_AREA_AVERAGING);
            image = new ImageIcon(newimg);
            SwingUtilities.invokeLater(() -> {
                btnDice.setIcon(image);
            });
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void drawBoard() {
//        int wid = pnl_Board.getWidth();
//        int cellWidth = wid / 10;
//        System.out.println("DRAW WITH : " + cellWidth);
//        Graphics2D g2d = (Graphics2D) pnl_Board.getGraphics();
//        Rectangle brd = pnl_Board.getBounds();
//        g2d.setColor(Color.red);
//        g2d.drawLine(brd.x, brd.y + cellWidth, brd.x + brd.width, brd.y + brd.height);
//        g2d.draw3DRect(0, 0, cellWidth, cellWidth, true);
//        pnl_Board.repaint();
//        pnl_Board.update(g2d);
    }

    private void animateDice() {
        timer.start();
    }

    public GamePanel(ArrayList<player> players) {
        initComponents();
        setTitle("Snake & Ladder");
        pnl_playerlist.setLayout(new GridLayout(0, 1, 10, 10));
        this.players = players;
        jScrollPane1.repaint();
        jScrollPane1.updateUI();
        populatePlayers();
        setVisible(true);
        btnDice.setBorder(new EmptyBorder(0, 0, 0, 0));
        btnDice.setBorderPainted(false);
//        drawBoard();
    }

    public GamePanel() {
        initComponents();
        pnl_Board = new board(players);
        getContentPane().add(pnl_Board);
        pack();
        repaint();
        setTitle("Snake & Ladder");
        pnl_playerlist.setLayout(new GridLayout(0, 1, 10, 10));
        jScrollPane1.repaint();
        jScrollPane1.updateUI();
        populatePlayers();
        setVisible(true);
        drawBoard();

    }

    private void populatePlayers() {
        players.forEach((t) -> {
            pnl_playerlist.add(new playertabSmall(t));
            jScrollPane1.repaint();
            jScrollPane1.updateUI();
            System.out.println("PLAYER ADDED");
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pnl_playerlist = new javax.swing.JPanel();
        btnDice = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1000, 750));

        pnl_playerlist.setBackground(new java.awt.Color(235, 237, 183));

        javax.swing.GroupLayout pnl_playerlistLayout = new javax.swing.GroupLayout(pnl_playerlist);
        pnl_playerlist.setLayout(pnl_playerlistLayout);
        pnl_playerlistLayout.setHorizontalGroup(
            pnl_playerlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnl_playerlistLayout.setVerticalGroup(
            pnl_playerlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(pnl_playerlist);

        btnDice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(724, 724, 724)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(752, 752, 752)
                .addComponent(btnDice, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(btnDice, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiceActionPerformed
        animateDice();
        drawBoard();
    }//GEN-LAST:event_btnDiceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GamePanel pnl = new GamePanel();
                pnl.setVisible(true);
//                pnl.setDiceImage(6);
            }
        });
    }
    private JPanel pnl_Board;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnl_playerlist;
    // End of variables declaration//GEN-END:variables
}
